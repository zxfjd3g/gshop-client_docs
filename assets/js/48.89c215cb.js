(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{406:function(a,t,v){"use strict";v.r(t);var e=v(40),_=Object(e.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"项目总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#项目总结"}},[a._v("#")]),a._v(" 项目总结")]),a._v(" "),v("h2",{attrs:{id:"功能模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#功能模块"}},[a._v("#")]),a._v(" 功能模块")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("首页\n商品搜索列表\n商品详情\n购物车\n登陆与注册\n订单交易/结算\n支付\n个人中心/订单列表\n")])])]),v("h2",{attrs:{id:"使用的库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用的库"}},[a._v("#")]),a._v(" 使用的库")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("vue\nvue-router\nvuex\nvee-validate\nvue-lazyload\nelement-ui\n\naxios\nmockjs\nnprogress\nuuidjs\n\nswiper\nqrcode\nlodash\n")])])]),v("h2",{attrs:{id:"vue配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue配置"}},[a._v("#")]),a._v(" Vue配置")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("name\ndata\nprops\ncomputed\nwatch\nmethods\nmounted/created\nbeforeCreate\ncomponents\n")])])]),v("h2",{attrs:{id:"_2个重要方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2个重要方法"}},[a._v("#")]),a._v(" 2个重要方法:")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("vm.$nextTick()与Vue.nextTick()\nvm.$set()与Vue.set()\n")])])]),v("h2",{attrs:{id:"与后台交互"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#与后台交互"}},[a._v("#")]),a._v(" 与后台交互")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("axios二次封装\n    1). 配置通用的基础路径和超时\n    2). 显示请求进度条\n    3). 成功返回的数据不再是response, 而直接是响应体数据response.data\n    4). 统一处理请求错误, 具体请求也可以选择处理或不处理\n    5). 每次请求都携带一个userTempId请求头, 数据值在state中\n    6). 每次请求(已登陆)都携带一个token请求头, 数据值在state中\npostman与测试接口\n定义接口请求函数模块\n在vuex的异步action中调用接口请求函数\n将API挂载到Vue的原型对象上, 在组件中调用接口请求函数与后台交互: Vue.prototype.$API = this\n当后台接口还未完成时, 先mock数据, 可以使用mockjs, 当然有的公司可能有自己的一套\n")])])]),v("h2",{attrs:{id:"vuex"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[a._v("#")]),a._v(" vuex")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("基本组成: store / state / mutations / actions / modules\nvuex多模块编程: 当要管理的数据过多时, 将每个模块的数据单独管理, 更方便, 更有扩展性\n带vuex的整体编码组成:\n    component:\n        触发action调用请求获取数据: dispatch()\n        读取vuex中的数据: mapState() / mapGetters()\n        模板动态显示数据: 插值与指令\n    vuex:\n        action: 调用API函数请求获取数据, 提交给mutation\n        mutation: 更新state数据\n    api:\n        axios二次封装\n        定义针对不同接口的请求函数\n")])])]),v("h2",{attrs:{id:"路由相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#路由相关"}},[a._v("#")]),a._v(" 路由相关")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("跳转路由的2种基本方式: 声明式路由与编程式路由\n跳转路由携带参数的类型: params与query参数\n携带参数的2种方式: 字符串与对象形式\n参数相关问题:\n    params与path配置能不能同时使用\n    如何配置params参数可传可不传?\n    路由组件能不能传递props参数\n    编程式路由跳转到当前路由, 参数不变会报出错误\n如何让路由跳转后, 滚动条自动停留到起始位置\n    scrollBehavior配置\n路由导航守卫的理解和使用\n    全局前置守卫\n    路由/组件前置守卫\n")])])]),v("h2",{attrs:{id:"自定义通用型-复用型组件的基本步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义通用型-复用型组件的基本步骤"}},[a._v("#")]),a._v(" 自定义通用型/复用型组件的基本步骤")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("实现静态组件: 模板/样式写好\n设计从外部接收的数据: props\n设计内部的数据: data\n设计基于props和data的计算属性数据: computed\n根据props和data数据和computed进行动态显示\n更新数据, 更新界面, 通知父组件\n")])])]),v("h2",{attrs:{id:"相关问题-具体内容看笔记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关问题-具体内容看笔记"}},[a._v("#")]),a._v(" 相关问题(具体内容看笔记)")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("编程式路由跳转到当前路由, 参数不变会报出错误\n    vue-router版本变化: 上一个项目没问题, 新的项目有问题\n    重写VueRouter原型上的push/replace方法\n优化减小打包文件: \n    对UI组件库实现按需打包\n    对lodash库实现按需引入\n什么时候需要使用编程式导航代替声明式导航\n    有一定条件限定\n    个数太多\n优化事件处理效率: \n    利用事件委托\n如何携带点击的分类的数据?\n\tevent.target得到a标签\n\t利用自定义的data标签属性来保存分类信息\n对mouseEnter高频事件进行节流处理\n\t使用lodash的throttle进行节流处理\n分发异步action后, 如何能知道处理完成了\n    回调函数\n    dipatch()的返回值是异步action返回的promise\n区别userTempId与Token\n\tuserTempId: 未登陆的标识\n\tToken: 登陆用户的标识\n2种懒加载的优化手段:\n    路由组件懒加载\n    图片懒加载注册\n")])])]),v("h2",{attrs:{id:"面试可说性强的功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试可说性强的功能"}},[a._v("#")]),a._v(" 面试可说性强的功能")]),a._v(" "),v("h3",{attrs:{id:"三级分类列表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三级分类列表"}},[a._v("#")]),a._v(" 三级分类列表")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("使用编程式导航代替声明式导航")]),a._v(" "),v("ul",[v("li",[a._v("router-link太多 ==> 创建很多组件对象 ==> 占用内存大, 效率低")])])]),a._v(" "),v("li",[v("p",[a._v("优化事件处理效率")]),a._v(" "),v("ul",[v("li",[a._v("利用事件委托: event.target")]),a._v(" "),v("li",[a._v("理解事件委托与事件冒泡")])])]),a._v(" "),v("li",[v("p",[a._v("如何携带点击的分类的数据?")]),a._v(" "),v("ul",[v("li",[a._v("event.target得到a标签")]),a._v(" "),v("li",[a._v("利用自定义的data标签属性来保存分类信息")])])]),a._v(" "),v("li",[v("p",[a._v("对mouseEnter高频事件进行节流处理")]),a._v(" "),v("ul",[v("li",[a._v("使用lodash的throttle进行节流处理")]),a._v(" "),v("li",[a._v("对lodash库实现按需引入")])])])]),a._v(" "),v("h3",{attrs:{id:"商品搜索列表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#商品搜索列表"}},[a._v("#")]),a._v(" 商品搜索列表")]),a._v(" "),v("ul",[v("li",[a._v("准备各种搜索条件\n"),v("ul",[v("li",[a._v("category1Id: '', // 一级分类ID")]),a._v(" "),v("li",[a._v("category2Id: '', // 二级分类ID")]),a._v(" "),v("li",[a._v("category3Id: '', // 三级分类ID")]),a._v(" "),v("li",[a._v("categoryName: '', // 分类名称")]),a._v(" "),v("li",[a._v("keyword: '', // 关键字")]),a._v(" "),v("li",[a._v("trademark: '', // 品牌  \"ID:品牌名称\"")]),a._v(" "),v("li",[a._v('props: [], // 商品属性的数组: ["属性ID:属性值:属性名"] 示例: ["2:6.0～6.24英寸:屏幕尺寸"]')]),a._v(" "),v("li",[a._v("order: '1:desc', // 排序方式  1: 综合,2: 价格 asc: 升序,desc: 降序  示例: \"1:desc\"")]),a._v(" "),v("li",[a._v("pageNo: 1, // 当前页码")]),a._v(" "),v("li",[a._v("pageSize: 10, // 每页数量")])])]),a._v(" "),v("li",[a._v("添加搜索条件")]),a._v(" "),v("li",[a._v("删除搜索条件\n"),v("ul",[v("li",[a._v("删除分类或关键字条件后, 地址栏还有条件参数?")]),a._v(" "),v("li",[a._v("删除关键字条件, 输入框中的关键字没有同步删除?")])])]),a._v(" "),v("li",[a._v("排序处理\n"),v("ul",[v("li",[a._v("根据综合/价格/销量/评价排序")]),a._v(" "),v("li",[a._v("升序/降序")]),a._v(" "),v("li",[a._v("搞清条件数据结构\n"),v("ul",[v("li",[a._v("orderFlag:orderType")]),a._v(" "),v("li",[a._v("orderFlag: 1: 综合,2: 价格, 3: 销量, 4: 评价")]),a._v(" "),v("li",[a._v("orderType:  asc: 升序,desc: 降序")])])])])])]),a._v(" "),v("h3",{attrs:{id:"下单支付流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#下单支付流程"}},[a._v("#")]),a._v(" 下单支付流程")]),a._v(" "),v("ul",[v("li",[a._v("去结算 ==> 获取订单交易数据")]),a._v(" "),v("li",[a._v("提交订单 ==>提交下单请求, 得到订单ID")]),a._v(" "),v("li",[a._v("根据订单ID获取支付信息\n"),v("ul",[v("li",[a._v("金额")]),a._v(" "),v("li",[a._v("支付url")])])]),a._v(" "),v("li",[a._v("支付\n"),v("ul",[v("li",[a._v("根支付Url生成支付二维码图片显示, 使用qrcode")]),a._v(" "),v("li",[a._v("扫码支付")]),a._v(" "),v("li",[a._v("轮询请求获取订单状态")])])]),a._v(" "),v("li",[a._v("分页显示订单列表")])]),a._v(" "),v("h3",{attrs:{id:"注册流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注册流程"}},[a._v("#")]),a._v(" 注册流程")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("前台: 输入注册需要的相关信息(用户名/密码/...), 进行前台表单校验, 如果不通过, 提示错误")])]),a._v(" "),v("li",[v("p",[a._v("前台: 发送注册的ajax请求(post), 携带注册接口需要的相关数据(用户名/密码/...)")])]),a._v(" "),v("li",[v("p",[a._v("后台: 获取到注册请求携带的参数, 去数据库中判断是否已经存在")]),a._v(" "),v("ul",[v("li",[a._v("如果已经存在, 返回提示此用户已不存在的提示信息")]),a._v(" "),v("li",[a._v("如果不存在, 保存到数据库, 返回成功的数据")])])]),a._v(" "),v("li",[v("p",[a._v("前台: 接收到响应")]),a._v(" "),v("ul",[v("li",[a._v("如果是不成功的数据, 提示")]),a._v(" "),v("li",[a._v("如果是成功的数据, 自动跳转到登陆页面")])])])]),a._v(" "),v("h3",{attrs:{id:"登陆流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#登陆流程"}},[a._v("#")]),a._v(" 登陆流程")]),a._v(" "),v("ul",[v("li",[a._v("前台: 输入登陆需要的相关信息(用户名/密码),  进行前台表单校验, 如果不通过, 提示错误")]),a._v(" "),v("li",[a._v("前台: 发送登陆的ajax请求(post), 携带登陆接口需要的相关数据(用户名/密码)")]),a._v(" "),v("li",[a._v("后台: 获取到登陆请求携带的参数, 去数据库中查询看是否存在\n"),v("ul",[v("li",[a._v("如果不存在, 返回登陆失败的信息")]),a._v(" "),v("li",[a._v("如果存在, 生成一个新的token字符串, 将token与用户信息一起返回")])])]),a._v(" "),v("li",[a._v("前台: 接收到响应\n"),v("ul",[v("li",[a._v("如果是不成功的数据, 提示")]),a._v(" "),v("li",[a._v("如果是成功的数据,\n"),v("ul",[v("li",[a._v("将用户信息和token都保存到vuex中")]),a._v(" "),v("li",[a._v("将token保存到localStorage中   ==> 不保存用户信息")]),a._v(" "),v("li",[a._v("跳转到首页或redirect页面")])])])])])]),a._v(" "),v("h3",{attrs:{id:"自动登陆流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动登陆流程"}},[a._v("#")]),a._v(" 自动登陆流程")]),a._v(" "),v("ul",[v("li",[a._v("简单说: 页面一加载时, 发送请求根据token获取用户信息")]),a._v(" "),v("li",[a._v("利用全局前置守卫:\n"),v("ul",[v("li",[a._v("一旦发再当前没有登陆, 但前面登陆过(有token, 没有用户信息)")]),a._v(" "),v("li",[a._v("发送请求根据token获取用户信息\n"),v("ul",[v("li",[a._v("成功了, 保存用户信息及token")]),a._v(" "),v("li",[a._v("失败了(说明token过期了): 清除token, 强制跳转到登陆页面")])])])])])]),a._v(" "),v("h3",{attrs:{id:"购物车模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#购物车模块"}},[a._v("#")]),a._v(" 购物车模块")]),a._v(" "),v("ul",[v("li",[a._v("购物车数据是保存在后台的, 标识是什么?\n"),v("ul",[v("li",[a._v("未登陆: 标识为用户临时ID(userTempId)\n"),v("ul",[v("li",[a._v("第一次访问时前台利用uuid库生成的唯一字符串, 保存保存在local中")]),a._v(" "),v("li",[a._v("每次请求时通过请求头自动携带它(利用请求拦截器)")])])]),a._v(" "),v("li",[a._v("登陆: 登陆用户对应的token\n"),v("ul",[v("li",[a._v("用户请求登陆时, 服务器端生成并返回给浏览器, 浏览器收到后自动保存到local中")]),a._v(" "),v("li",[a._v("每次请求时通过请求头自动携带它(利用请求拦截器)")])])])])]),a._v(" "),v("li",[a._v("添加购物车 / 修改购物项数量\n"),v("ul",[v("li",[a._v("提交请求时, 携带商品的skuid和数量")]),a._v(" "),v("li",[a._v("这2个操作是同一个接口, 也就是数量有可能是负数")])])]),a._v(" "),v("li",[a._v("获取购物车列表\n"),v("ul",[v("li",[a._v("请求获取时不需要携带额外参数, 会自动携带标识: userTempId / token")]),a._v(" "),v("li",[a._v("一旦用户登陆上, 后台会将关联在usertempId上的购物车数据合并到token对应用户关联的购物车数据")])])]),a._v(" "),v("li",[a._v("删除购物项(一个/多个)\n"),v("ul",[v("li",[a._v("请求接口, 携带一个skuId或多个skuId的数组")])])]),a._v(" "),v("li",[a._v("勾选购物项(一个/多个)\n"),v("ul",[v("li",[a._v("请求接口, 携带一个skuId或多个skuId的数组 和 是否勾选的标识数据(0/1)")])])])])])}),[],!1,null,null,null);t.default=_.exports}}]);