(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{403:function(a,t,e){"use strict";e.r(t);var s=e(40),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"day04"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#day04"}},[a._v("#")]),a._v(" day04")]),a._v(" "),e("h2",{attrs:{id:"今日任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#今日任务"}},[a._v("#")]),a._v(" 今日任务")]),a._v(" "),e("ol",[e("li",[a._v("使用mockjs模拟今日推荐和楼层的接口")]),a._v(" "),e("li",[a._v("根据mock的接口实现动态TodayRecommend与Floor组件")]),a._v(" "),e("li",[a._v("mock一下Rank与Like组件的数据, 并动态显示(自己完成)")]),a._v(" "),e("li",[a._v("Search组件和SearchSelector组件动态显示")]),a._v(" "),e("li",[a._v("根据分类/关键字条件进行搜索")]),a._v(" "),e("li",[a._v("根据品牌进行搜索")]),a._v(" "),e("li",[a._v("根据平台属性进行搜索")])]),a._v(" "),e("h2",{attrs:{id:"_3-使用mockjs来mock接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用mockjs来mock接口"}},[a._v("#")]),a._v(" 3) 使用mockjs来mock接口")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("下载mockjs, 引入使用\nmockjs: 生成随机数据，拦截 Ajax 请求, 返回生成的随机数据\n定义mock json数据: 使用mockjs的随机语法\nmockServer中: 通过Mock.mock()来定义mock接口\nmain.js中: 引入mockServer\n")])])]),e("h2",{attrs:{id:"根据mock的接口实现动态todayrecommend与floor组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据mock的接口实现动态todayrecommend与floor组件"}},[a._v("#")]),a._v(" 根据mock的接口实现动态TodayRecommend与Floor组件")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("api: \n\tmockAjax: 封装axios\n\tindex: reqRecommends() / reqFloors()\nvuex\n    state: banners / floors\n    mutation: RECEIVE_BANNERS() / RECEIVE_FLOORS()\n    action: getBanners() / getFloors()\n组件\n\tdispatch()\n\tmapState()\n")])])]),e("h2",{attrs:{id:"自己mock一下rank与like组件的数据-并动态显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己mock一下rank与like组件的数据-并动态显示"}},[a._v("#")]),a._v(" 自己mock一下Rank与Like组件的数据, 并动态显示")]),a._v(" "),e("h2",{attrs:{id:"search静态组件和动态显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#search静态组件和动态显示"}},[a._v("#")]),a._v(" Search静态组件和动态显示")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("api: reqProductList\nvuex: search.js---state/mutations/actions/getters\ncomponent: dispatch() / mapGetters() / 模板显示\n")])])]),e("h2",{attrs:{id:"搜索商品分页列表数据的条件参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搜索商品分页列表数据的条件参数"}},[a._v("#")]),a._v(" 搜索商品分页列表数据的条件参数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("category1Id: '', // 一级分类ID\ncategory2Id: '', // 二级分类ID\ncategory3Id: '', // 三级分类ID\ncategoryName: '', // 分类名称\nkeyword: '', // 搜索关键字\nprops: [], // [\"属性ID:属性值:属性名\"]示例: [\"2:6.0～6.24英寸:屏幕尺寸\"]\ntrademark: '', // 品牌: \"ID:品牌名称\"示例: \"1:苹果\"\norder: '', // 排序方式 1: 综合,2: 价格 asc: 升序,desc: 降序 示例: \"1:desc\"\npageNo: 1, // 页码\npageSize: 10, // 每页数量\n")])])]),e("h2",{attrs:{id:"根据分类-关键字条件进行搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据分类-关键字条件进行搜索"}},[a._v("#")]),a._v(" 根据分类/关键字条件进行搜索")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("搜索的条件\n1. 关键字搜索: keyword\n2. 分类搜索: category1Id / category2Id / category3Id / categoryName\n\n初始化搜索:\n\t在created中收集参数数据到options中, 并发送搜索的请求\n\n问题: 当前已经在搜索页面, 再添加别的搜索条件, 不会再发请求?\n原因: 从搜索跳转到搜索, 搜索组件对象不会重新创建, 初始化的勾子不会重新执行 ==> 不会再发请求\n解决: 监视路由参数的变化  watch: $route  一旦参数发生了变化, 监视的回调就会自动调用\n\n动态显示分类和关键字条件, 并实现删除重新请求\n\t读取状态数据显示, 需要判断有才显示\n\t重置数据\n\t重新发请求获取新的列表数据\n\t\n问题: 删除分类和关键字条件, 地址栏还有参数数据\n原因: 删除时没有去除路径上的参数数据\n解决: 重新跳转到search, 不再携带删除的条件所对应的参数\n\n问题: 删除关键字条件, 搜索框中的数据没有清除\n解决: 使用全局事件总线进行兄弟组件间通信\n\t1) 创建或指定事件总线对象, 保存到Vue的原型上\n\t2). 在Header中绑定自定义事件监听, 在回调中清除数据\n\t3). 在Search中分发事件\n\t\n\t4). 在Header组件死亡之前解绑事件监听: 在beforeDestory中\n\n问题: 在搜索界面多次跳转后, 点击返回不能一次性跳转到首页\n原因: 跳转到搜索界面都是用的push\n解决:\n\t从首页到搜索页: push()\n\t从搜索到搜索页: replace()\n\t\n代码优化: 使用watch的immediate为true让监视的回调初始执行一次\n")])])]),e("h2",{attrs:{id:"根据品牌进行搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据品牌进行搜索"}},[a._v("#")]),a._v(" 根据品牌进行搜索")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("搜索的条件数据: trademark: '', // 品牌: \"ID:品牌名称\"示例: \"1:苹果\"\n点击每个品牌:\n\t更新options中的trademark为指定的值: 子向父通信 ==> 选择函数props\n\t重新请求获取数据列表\n\t注意: 需要判断一下是否已经在条件了\n删除品牌条件\n\t重置品牌数据: option.trademark = ''\n\t重新请求获取数据列表\n")])])]),e("h2",{attrs:{id:"根据属性进行搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根据属性进行搜索"}},[a._v("#")]),a._v(" 根据属性进行搜索")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('属性的条件数据:  props: [], // ["属性ID:属性值:属性名"]示例: ["2:6.0～6.24英寸:屏幕尺寸"]\n\n点击某个属性值:\n\t如果已经存在条件数组中, 不添加\n\t向props数组添加一个条件字符串 子向父通信==>vue自定义事件\n\t重新请求获取数据列表\n\n点击删除某个属性条件:\n\t删除数组中对应的条件字符串\n\t重新请求获取数据列表\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);