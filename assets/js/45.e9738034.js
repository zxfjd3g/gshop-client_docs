(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{403:function(t,a,e){"use strict";e.r(a);var s=e(40),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"day07"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#day07"}},[t._v("#")]),t._v(" day07")]),t._v(" "),e("h2",{attrs:{id:"今日任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#今日任务"}},[t._v("#")]),t._v(" 今日任务")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("注册\n登陆\n自动登陆\n退出登陆\n")])])]),e("h2",{attrs:{id:"注册登陆的组件界面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册登陆的组件界面"}},[t._v("#")]),t._v(" 注册登陆的组件界面")]),t._v(" "),e("h2",{attrs:{id:"相关api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关api"}},[t._v("#")]),t._v(" 相关API")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("reqRegister(userInfo)\nreqLogin(mobile, password)\nreqLogout()\n")])])]),e("h2",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" vuex")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("user.js\nstate: userInfo\nmutations: \n\tRECEIVE_USER_INFO ()\n\tRESET_USER_INFO ()\nactions:\n\tregister(): 请求注册的接口, 完成后不用更新state, 只需要将请求的结果通知给组件\n\tlogin(): 请求登陆接口成功后, 保存返回的用户信息\t\n\t\t通过commit触发mutation调用 ==> 保存信息到state\n\t\t保存localStorage中  ===> 从而可以实现自动登陆的功能\n\tlogout(): 请求登出的接口成功后, 清除前台用户的信息数据\n\t\tstate中的userInfo\n\t\tlocalStorage中的userInfo\ngetters: \n")])])]),e("h2",{attrs:{id:"区别token与usertempid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区别token与usertempid"}},[t._v("#")]),t._v(" 区别token与userTempId")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("userTmepId\n\t未登陆用户(浏览器)的标识数据(字符串)\n\t浏览器端创建, 并保存在浏览器端\n\t每次请求都会通过请求头携带: userTempId: uuid字符串\ntoken\n\t已登陆用户的标识数据(字符串)\n\t请求登陆成功时, 服务器端创建并返回的, 保存在浏览器端\n\t每次请求(登陆后)都会通过请求头携带: token: 字符串(加密后的值, 里面包含了用户id和失效时间的信息)\n在购物车中应用的细节:\n\t在登陆前, 后台通过userTmepId来保存对应的购物车数据\n\t在登陆后, 后台通过token对应的用户来保存对应的购物车数据\n\t细节: 登陆后再退出登陆, 前面未登陆添加的购物车数据就看不到了?\n\t\t登陆后发获取购物车数据请求, 同时携带userTempId和token, 后台会将userTempId对应购物车数据转移到token对应的用户下, 退出登陆后, 根据userTempId不再能得到以前的购物车数据\n")])])]),e("h2",{attrs:{id:"register组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#register组件"}},[t._v("#")]),t._v(" Register组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('实现一次性图形验证码的动态显示与点击更新显示\n\t<img src="/api/user/passport/code"> // 浏览器发的http请求没有跨域, 但代理服务转发请求返回的图片\n前台表单校验\n收集用户输入: v-model\n分发注册的异步action\n如果成功了跳转到登陆页面\n如果失败了, 提示并重新显示验证码\n')])])]),e("h2",{attrs:{id:"注册-登陆的前台表单校验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册-登陆的前台表单校验"}},[t._v("#")]),t._v(" 注册/登陆的前台表单校验")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("使用vee-validate: npm install -S vee-validate@2.2.15  没用3.x新版本, 用起来比较麻烦\n目标: 根据我们文档和已经实现的注册的表单校验来实现登陆表单校验\n")])])]),e("h2",{attrs:{id:"login组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#login组件"}},[t._v("#")]),t._v(" Login组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("前台表单校验\n收集用户输入数据\n点击回调中分发给登陆的异步action发请求\n如果成功了, 跳转到首页\n如果失败了, 提示\n")])])]),e("h2",{attrs:{id:"自动登陆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动登陆"}},[t._v("#")]),t._v(" 自动登陆")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("方式一: 登陆请求成功后保存返回的用户所有信息(token及用户名等)到local中\n\t\t初始化时就自动读取local中保存的用户信息实现自动登陆  ===> 不需要额外发请求\n方式二:登陆请求成功后只保存token到local中\n\t\t初始化时就需要从local中读取出token, 并发请求获取用户信息实现自动登陆 ==>需要额外发请求\n注意: 我们的后台没有一个根据token来获取用户信息的接口 ==> 只能用方式一\n")])])]),e("h2",{attrs:{id:"退出登陆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#退出登陆"}},[t._v("#")]),t._v(" 退出登陆")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("发送退出登陆的请求\n如果失败了提示\n如果成功了, 清除数据, 自动跳转到登陆页面\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);