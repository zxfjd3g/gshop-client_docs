(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{402:function(a,e,t){"use strict";t.r(e);var r=t(40),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"day04"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day04"}},[a._v("#")]),a._v(" day04")]),a._v(" "),t("h2",{attrs:{id:"今日任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#今日任务"}},[a._v("#")]),a._v(" 今日任务")]),a._v(" "),t("ol",[t("li",[a._v("使用mockjs模拟今日推荐和楼层的接口")]),a._v(" "),t("li",[a._v("根据mock的接口实现动态TodayRecommend与Floor组件")]),a._v(" "),t("li",[a._v("mock一下Rank与Like组件的数据, 并动态显示(自己完成)")]),a._v(" "),t("li",[a._v("Search组件和SearchSelector组件动态显示")]),a._v(" "),t("li",[a._v("根据分类/关键字条件进行搜索")]),a._v(" "),t("li",[a._v("根据品牌进行搜索")]),a._v(" "),t("li",[a._v("根据平台属性进行搜索")])]),a._v(" "),t("h2",{attrs:{id:"_3-使用mockjs来mock接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用mockjs来mock接口"}},[a._v("#")]),a._v(" 3) 使用mockjs来mock接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("下载mockjs, 引入使用\nmockjs: 生成随机数据，拦截 Ajax 请求, 返回生成的随机数据\n定义mock json数据: 使用mockjs的随机语法\nmockServer中: 通过Mock.mock()来定义mock接口\nmain.js中: 引入mockServer\n")])])]),t("h2",{attrs:{id:"根据mock的接口实现动态todayrecommend与floor组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据mock的接口实现动态todayrecommend与floor组件"}},[a._v("#")]),a._v(" 根据mock的接口实现动态TodayRecommend与Floor组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("api: \n\treqRecommends() / reqFloors()\nvuex\n    state: banners / floors\n    mutation: RECEIVE_BANNERS() / RECEIVE_FLOORS()\n    action: getBanners() / getFloors()\n组件\n\tdispatch()\n\tmapState()\n")])])]),t("h2",{attrs:{id:"自己mock一下rank与like组件的数据-并动态显示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自己mock一下rank与like组件的数据-并动态显示"}},[a._v("#")]),a._v(" 自己mock一下Rank与Like组件的数据, 并动态显示")]),a._v(" "),t("h2",{attrs:{id:"search静态组件和动态显示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#search静态组件和动态显示"}},[a._v("#")]),a._v(" Search静态组件和动态显示")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("api: reqProductList\nvuex: search.js---state/mutations/actions/getters\ncomponent: dispatch() / mapGetters() / 模板显示\n")])])]),t("h2",{attrs:{id:"搜索商品分页列表数据的条件参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搜索商品分页列表数据的条件参数"}},[a._v("#")]),a._v(" 搜索商品分页列表数据的条件参数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("category1Id: '', // 一级分类ID\ncategory2Id: '', // 二级分类ID\ncategory3Id: '', // 三级分类ID\ncategoryName: '', // 分类名称\nkeyword: '', // 搜索关键字\n\ntrademark: '', // 品牌: \"ID:品牌名称\" \"1:苹果\"\nprops: [], // 商品属性的数组: [\"属性ID:属性值:属性名\"] [\"2:6.0～6.24英寸:屏幕尺寸\"]\norder: '1:desc', // 排序方式  1: 综合,2: 价格 asc: 升序,desc: 降序  \"1:desc\"\n\npageNo: 1, // 页码\npageSize: 5, //\t每页数量\n")])])]),t("h2",{attrs:{id:"根据分类-关键条件进行搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据分类-关键条件进行搜索"}},[a._v("#")]),a._v(" 根据分类/关键条件进行搜索")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("分类条件数据: categoryName/category1Id/category2Id/category3Id\n关键字我们的数据: keyword\n\n需要根据分类的query参数和关键字的params参数搜索\n\t在created(): 先根据query & params参数来更新options数据\n\t再根据options数据发搜索的请求\n\t\n问题: 在搜索界面, 再次通过点击分类或搜索, 不会再发搜索的请求\n原因: 从A路由跳转到A路由, A路由组件对象不会重新创建(即使参数变化) ==> 不会再次调用初始勾子(created) ==> 没有发请求\n解决: 监视$route变化, 也就是监视路由参数变化, 一旦参数变化了重新请求获取分页列表数据\n\n显示分类条件 和 关键字条件\n删除分类条件 和 关键字条件\n\t重置相关数据\n\t重新请求获取数据\n\n问题: 删除分类和关键字条件后, 地址栏还有参数数据?\n解决: 去掉对应的参数数据\n\t删除分类: 重新跳转到search, 不携带query参数, 携带params\n\t删除关键字: 重新跳转到Search, 不携带params参数, 需要携带query\n\t\n问题: 删除关键字条件后, Header中输入框的关键字文本还在\n解决: 在删除关键字的回调中通知Header中删除输入框数据  ==> 兄弟组件间通信\n\t使用技术: 全局事件总线\n\t1). 将全局事件总线对象(vm)保存到Vue原型对象上\n\t2). 在Search中: 通过事件总线对象分发自定义事件\n\t3). 在Header中: 通过事件总线对象绑定自定义事件监听, 在回调中删除输入数据\n\t\n问题: 在搜索界面再次反复搜索后, 一次性回退不到home页 ==> 目标是一次回到Home\n原因: 从Search ==> Search我们现在用的是push()\n解决: 从Search ==> Search, 使用replace()\n")])])]),t("h2",{attrs:{id:"根据品牌进行搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据品牌进行搜索"}},[a._v("#")]),a._v(" 根据品牌进行搜索")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('品牌条件数据的结构: "ID:品牌名称" "1:苹果"\n子组件向父组件传递数据: 函数props\n限制: 如果点击的品牌已经在条件中了, 不发请求\n')])])]),t("h2",{attrs:{id:"根据属性进行搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据属性进行搜索"}},[a._v("#")]),a._v(" 根据属性进行搜索")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('属性数据的结构: props: [], // ["属性ID:属性值:属性名"] ["2:6.0～6.24英寸:屏幕尺寸"]\n添加属性条件:\n\t子组件向父组件通信: 自定义事件\n\t事件名: addProp\n\t数据: "属性ID:属性值:属性名"\n移除一个属性条件\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);