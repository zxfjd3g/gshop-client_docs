(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{403:function(t,e,a){"use strict";a.r(e);var n=a(40),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"day05"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#day05"}},[t._v("#")]),t._v(" day05")]),t._v(" "),a("h2",{attrs:{id:"今日任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#今日任务"}},[t._v("#")]),t._v(" 今日任务")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1. 排序搜索 \n2. 自定义分页组件\n3. Detail静态路由组件\n4. Detail组件的动态显示\n5. ImageList组件\n6. Zoom组件\n")])])]),a("h2",{attrs:{id:"排序搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序搜索"}},[t._v("#")]),t._v(" 排序搜索")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("排序的数据结构: order: '1:desc', // 排序方式  1: 综合,2: 价格 asc: 升序,desc: 降序  \"1:desc\"\n\toderFlag: '1' / '2'\n\torderType: 'asc' / 'desc\n\torderFlag:orderType\n当前排序项? \n\t根据当前order的oderFlag来确定\n当前排序方式?\n\t根据当前order的orderType来确定\n点击排序项切换排序\n\t点击当前排序项: 切换排序方式(排序项不变)\n\t点击非当前排序项: 切换排序项, 排序方式为降序\n\n注意: 如果不想把模块中的表达写得太长: 需要定义对应的计算属性或者方法\n")])])]),a("h2",{attrs:{id:"响应式数据对象-添加新属性和删除属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式数据对象-添加新属性和删除属性"}},[t._v("#")]),t._v(" 响应式数据对象: 添加新属性和删除属性")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("data或state中的所有层次的属性数据都是响应式的(属性值发生变化, 界面就会自动更新)\n响应式数据对象: data或state中对象类型的属性: 比如options\n给响应式数据对象添加新属性\n\t错误的写法：   不是响应式  ==> 不会自动更新界面\n\t\toptions.xxx = 'abc' \n\t正确的写法:  是响应式的 ==> 会自动更新界面\n\t\tVue.set( target, key, value )\n\t\tvm.$set( target, key, value )\n删除属性响应式数据对象的属性\n\t错误的写法：   \n\t\tdelete options.xxx   vue内部不知道, 界面不会自动更新\n\t正确的写法:  方法内部先删除属性, 再更新界面\n\t\tVue.delete( target, key )\n\t\tvm.$delete( target, key )\n")])])]),a("h2",{attrs:{id:"问题-优化减少没必要的请求参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题-优化减少没必要的请求参数"}},[t._v("#")]),t._v(" 问题: 优化减少没必要的请求参数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('原因: 当前的后台接口不需要空串参数或空数组参数\n解决: 在提交请求前, 将""参数和空数组的参数数据删除\n')])])]),a("h2",{attrs:{id:"自定义分页组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义分页组件"}},[t._v("#")]),t._v(" 自定义分页组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('直接使用已定义好的组件\n\t<Pagination \n      :currentPage="options.pageNo"\n      :pageSize="options.pageSize"\n      :total="productList.total"\n      :showPageNo="5"\n      @currentChange="getProductList"\n    />\n封装一个高复用的组件: Pagination      应该面试时交流\n\t静态模板与样式  ===> 静态组件\n\t设计props: 从父组件接收的可变数据\n\t\tcurrentPage: 当前页码\n\t\ttotal: 总数量\n\t\tpageSize: 每页数量\n\t\tshowPageNo: 连续页码数 (一般是奇数)\n\t\n\t设计data: 组件内部的可变数据\n\t\tmyCurrentPage: 组件内部维护的当前页码\n\t\n\t设计computed: 根据props或data数据计算产生的数据\n\t\ttotalPages: 总页数\n\t\t\t依赖数据: total / pageSize   19 / 2  10\n\t\t\t算法: Math.ceil(total/pageSize)\n\t\tstart/end: 连续页码的开妈页码与结束页码\n\t\t\t依赖数据: myCurrentPage / showPageNo / totalPages\n\t\t\t算法:\n\t\t\t\tstart的最小值是1\n\t\t\t\tend的最大值是totalPages\n\t\t\t\t从start到end的数量<=showPageNo\n\t\t\t\t\tstart = myCurrentPage - Math.floor(showPageNo/2)\n\t\t\t\t\tif (start<1)  start = 1\n\t\t\t\t\tend = start + showPageNo -1\n\t\t\t\t\tif (end>totalPages) {\n\t\t\t\t\t\tend = totalPages\n\t\t\t\t\t\tstart = end - showPageNo + 1\n\t\t\t\t\t\tif (start<1) start = 1\n\t\t\t\t\t}\n')])])]),a("p",[t._v("​\t\t\t\t\t\t\n​\t\t\n模板页面根据props/data/computed动态显示\nv-for/v-if/disabled\nv-for与v-if优先级问题    面试问")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("\tv-for与v-if的优先级   面试题\n      v-for的优先级高, 先执行, 每个遍历都会执行v-if\n      1). 将v-if判断的处理放在v-for父标签上: 只需要判断一次(原本是每个遍历的元素都会判断)  ==> 适用于判断与元素无关的情况\n      2). 最好使用计算属性来去掉v-if  ===> 减少遍历的次数 ==> 适用于根据元素数据来判断的情况\n\n\t当用户操作时更新数据  ==> 更新界面\n\t\t当当前组件更新数据后, 有可能需要通知父组件(使用什么技术? 自定义事件/函数props)\n\t\t当父组件的数据更新后, 有可能需要通知子组件\n\t\t\t\t父组件主动调用子组件的方法修改 ===> 当前不用(后面会用的)\n\t\t\t\t子组件主动监视父组件的变化  ===> 当前比较合适\n")])])]),a("h2",{attrs:{id:"双向数据绑定-面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向数据绑定-面试题"}},[t._v("#")]),t._v(" 双向数据绑定 面试题")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('数据绑定:\n\t数据劫持: 通过definedProperty给data中所有层次属性加getter/setter  --\x3eobserver\n\t订阅与发布: dep与watcher\n双向(v-model="xxx"):\n\tinput事件监听: 将最新输入的数据保存到data中   this.xxx = event.target.value   // 数据代理\n\n数组响应式处理: 重写数组一系列更新元素的方法(调用原生方法 ==> 更新界面)\n')])])]),a("h2",{attrs:{id:"模板的数据来源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板的数据来源"}},[t._v("#")]),t._v(" 模板的数据来源")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("data\nprops\ncomputed: data/props/state/getters\n")])])]),a("h2",{attrs:{id:"detail静态路由组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detail静态路由组件"}},[t._v("#")]),t._v(" Detail静态路由组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("定义Detail静态组件\n注册路由\n从Search跳转Detail组件: router-link/push()\n问题: 路由跳转后, 滚动条没有停留在最上面(0,0)\n\tscrollBehavior (to, from, savedPosition) {\n    \t// return 期望滚动到哪个的位置\n    \treturn { x: 0, y: 0 }\n  \t}\n")])])]),a("h2",{attrs:{id:"detail组件的动态显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detail组件的动态显示"}},[t._v("#")]),t._v(" Detail组件的动态显示")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("api: getDetailInfo()\nvuex: detail.js: state/mutations/actions/getters\ncomponent: dispatch()/mapState()/mapGetters()/模板\n")])])]),a("h2",{attrs:{id:"错误-typeerror-cannot-read-property-category1name-of-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误-typeerror-cannot-read-property-category1name-of-undefined"}},[t._v("#")]),t._v(" 错误: \"TypeError: Cannot read property 'category1Name' of undefined\"")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('说明: 在undefined上读取了category1Name属性\n原因:  data/state中的数据初始值是一个空对象/空数组, 如果模板中直接写一个三层(a.b.c)表达式\n解决1: 想办法不让detailInfo.categoryView的结果是undefined, 利用getters\n解决2: 利用v-if来判断, 只有当有数据才解析显示,  ==> 不能使用v-show\n\nimageList[currentIndex].imgUrl    a.b.c  v-if="a.b"  v-show="a.b"\n')])])]),a("h2",{attrs:{id:"销售属性列表功能-大家自己做"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#销售属性列表功能-大家自己做"}},[t._v("#")]),t._v(" 销售属性列表功能 (大家自己做)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("功能: \n\t二层嵌套列表 \n\t点击某一项就选中对应的项\n数据: \n\tdetailInfo中的spuSaleAttrList属性\n\tisChecked属性为'1'时代表是当前的\n\n功能: 动态显示 / 交互\n数据结构\n")])])]),a("h2",{attrs:{id:"imagelist组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imagelist组件"}},[t._v("#")]),t._v(" ImageList组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("使用swiper显示小图片轮播列表:\n\tslidesPerView: 5,  // 一次显示5页\n  \tslidesPerGroup: 5, // 每次翻动多少(5)页\n使用currentIndex标识当前图片下标, 点击时更新它\n")])])]),a("h2",{attrs:{id:"zoom组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zoom组件"}},[t._v("#")]),t._v(" Zoom组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("根据传入的imgUrl和bigUrl来动态显示中图和大图\n放大镜效果的布局:\n\t左侧:\n\t\t<img>: 显示中图\n\t\tevent的<div>: 用来绑定mousemove事件, 尺寸与<img>一样\n\t\tmask的<div>: 遮罩, 尺寸是<img>的1/4\n\t右侧:\n\t\tbig的<div>: 包含<img>, 尺寸与左侧<img>一样\n\t\t<img>: 显示大图, 尺寸是左侧<img>的4倍  ==> 右侧只能看到大图的1/4部分\n放大镜的事件处理\n\t绑定什么事件监听?\n\t\tmousemove\n\t给谁绑定?\n\t\t左侧的event <div>\n\t回调函数中做什么?\n\t\t计算left与top值:\n\t\t\t依赖数据: 事件的offsetX/offsetY, mask <div>的宽度maskWidth\n\t\t\t算法:\n\t\t\t\tleft = offsetX - maskWidth/2\n\t\t\t\ttop = offsetY - maskWidth/2\n\t\t\t\tleft和top必须在[0, maskWidth]区间内\n\n\t\t指定mask <div>的坐标值(left, top)\n\t\t\tmaskDiv.style.left = left + 'px'\n\t\t\tmaskDiv.style.top = top + 'px'\n\t\t指定大图 <img>的坐标值(left, top)\n\t\t\tbigImg.style.left = -2 * left + 'px'\n\t\t\tbigImg.style.top = -2 * top + 'px'\n")])])]),a("h2",{attrs:{id:"编码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码分析"}},[t._v("#")]),t._v(" 编码分析")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('ImageList\n\t读取vuex getters中的数据\n\tswiper\n\t\tslidesPerView: 5\n\t\tslidesPerGroup: 5\n\tcurrentIndex = 0\n\t点击某个小图更新Detail组件currentImageIndex(子向父通信)\n\nZoom\n\tprops: imgUrl / bigUrl\n\t放大镜效果\n\t\tmousemove\n\nDetail\n\tskuImageList\n\tcurrentImageIndex = 0\n\tskuImageList[currentImageIndex].imgUrl    v-if="skuImageList[currentImageIndex]"\n\t<Zoom :imgUrl="skuImageList[currentImageIndex].imgUrl" v-if="skuImageList[currentImageIndex]"/>')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);